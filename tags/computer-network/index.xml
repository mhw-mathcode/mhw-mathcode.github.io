<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Computer Network on mhw</title>
        <link>https://mhw-mathcode.github.io/tags/computer-network/</link>
        <description>Recent content in Computer Network on mhw</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>mhw-mathcode</copyright>
        <lastBuildDate>Thu, 14 Aug 2025 03:38:34 +0000</lastBuildDate><atom:link href="https://mhw-mathcode.github.io/tags/computer-network/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>学习笔记-计算机网络</title>
        <link>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Fri, 04 Jul 2025 21:04:41 +0800</pubDate>
        
        <guid>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
        <description>&lt;h2 id=&#34;1-计算机网络体系结构&#34;&gt;1. 计算机网络体系结构
&lt;/h2&gt;&lt;p&gt;计算机网络：一些互联的、自治的计算机系统的集合。功能：数据通信、资源共享。&lt;/p&gt;
&lt;p&gt;OSI：应用层，表示层，会话层，传输层，网络层，链路层，物理层。
TCP/IP：应用层，传输层，网络层，链路层，物理层。&lt;/p&gt;
&lt;p&gt;五层模型：
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.png&#34;
	width=&#34;1318&#34;
	height=&#34;742&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1_hu_76435d5e94e798c1.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1_hu_e5e7f8b88c3f1366.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;五层模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-物理层&#34;&gt;2. 物理层
&lt;/h2&gt;&lt;p&gt;三种通信方式：单工通信、半双工通信、全双工通信。&lt;/p&gt;
&lt;p&gt;同步通信：同步通信双方必须先建立同步，即双方的时钟要调整到同一个频率。收发双方不停的发送和接收连续的同步比特流。
异步通信：发送字符之间的时间间隔可以是任意的，但接收端必须时刻做好接收的准备。&lt;/p&gt;
&lt;p&gt;数据交换方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路交换：​ 整个报文段的比特流从源点连续的直达终点，专用物理连接线路，直到传输结束。包含建立连接、通信、释放连接三个阶段。&lt;/li&gt;
&lt;li&gt;报文交换：将整个数据报发到相邻节点，全部存储下来，查找转发表，转发到下一个节点。&lt;/li&gt;
&lt;li&gt;分组交换：把报文分组转发到相邻节点，查找转发表，转发到下一个节点。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.png&#34;
	width=&#34;1359&#34;
	height=&#34;647&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2_hu_6c924bf19a3d0fd7.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2_hu_9684712f9a7ec029.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;方式的选择&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;504px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-数据链路层&#34;&gt;3. 数据链路层
&lt;/h2&gt;&lt;p&gt;数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将来自网络层的数据可靠地传输到相邻节点的目标机网络层。其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。&lt;/p&gt;
&lt;p&gt;数据链路层的五大功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为网络层提供服务&lt;/li&gt;
&lt;li&gt;链路管理：链路的建立、维持和释放&lt;/li&gt;
&lt;li&gt;组帧：网络层交付下来的数据包叫做分组 ，数据链路层需要对分组封装成帧 ，帧是数据量链路层传输的基本单位；&lt;/li&gt;
&lt;li&gt;流量控制：发送方、接收方之间传输速率和接收速率的差异较大，需要通过控制发送方来达到可靠数据传输；&lt;/li&gt;
&lt;li&gt;差错控制：帧在传输过程中出现错误，有位错和帧错，差错控制负责发现错误，解决错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;组帧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据帧是数据链路层的基本传输单位，帧 = 帧首部 + IP数据报 + 帧尾部；数据链路层把帧（比特组）做为传输单位，在出错时只需重发出错的帧，而不必重发全部数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差错控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传输中的差错一般都是由于噪声引起的；&lt;/li&gt;
&lt;li&gt;差错类型：
&lt;ul&gt;
&lt;li&gt;位错：比特位出错；&lt;/li&gt;
&lt;li&gt;帧错：帧丢失（重传）、帧重复和帧失序（帧序号）；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;检错编码：奇偶校验码、循环冗余码（CRC）&lt;/li&gt;
&lt;li&gt;纠错编码：海明码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流量控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量控制：控制发送速率，使接收方有足够的缓冲空间来接受每一个帧。通常用于解决发送较快、接收较慢而造成的传输错误。
&lt;ul&gt;
&lt;li&gt;数据链路层的流量控制手段：接收方收不下就不回复确认；&lt;/li&gt;
&lt;li&gt;传输层的流量控制手段：接收方给发送方一个窗口公告。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流量控制的方法：
&lt;ul&gt;
&lt;li&gt;停止-等待协议：发送方每发一个帧就会停止发送，等待对方的确认信号（ACK），然后再发送下一个帧。&lt;/li&gt;
&lt;li&gt;滑动窗口协议：
&lt;ul&gt;
&lt;li&gt;后退 N 帧协议（GBN）&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.png&#34;
	width=&#34;1367&#34;
	height=&#34;764&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3_hu_2f082a62928d896d.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3_hu_ae5fb48279db0572.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;GBN（数字前面都加个“第”）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;选择重传协议（SR）&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.png&#34;
	width=&#34;1382&#34;
	height=&#34;767&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4_hu_d144459e2e2f4685.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4_hu_9b16f328036547fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;SR（数字前面都加个“第”）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;介质访问控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介质访问控制：采用一些措施，使得两对结点之间的通信不会互相干扰。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.png&#34;
	width=&#34;1372&#34;
	height=&#34;716&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5_hu_7e84a420c795af9c.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5_hu_1a3c3dc6a981db45.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;介质访问控制&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;CSMA 协议：先听再发。
CS：载波侦听/监听，每一个站在发送数据之前以及发送数据时都要检测一下总线上是否有其他计算机在发送数据；
MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。&lt;/li&gt;
&lt;li&gt;CSMA/CD 协议：先听再说，边听边说。CD，碰撞检测。&lt;/li&gt;
&lt;li&gt;CSMA/CA 协议：CA，避免碰撞。&lt;/li&gt;
&lt;li&gt;截断二进制指数规避算法：发生碰撞后，什么时候重传？
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.png&#34;
	width=&#34;1364&#34;
	height=&#34;681&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6_hu_a4851bc0606c9816.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6_hu_373629a727eb9b42.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;截断二进制指数规避算法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
