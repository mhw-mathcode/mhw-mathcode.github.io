<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Computer Network on mhw</title>
        <link>https://mhw-mathcode.github.io/tags/computer-network/</link>
        <description>Recent content in Computer Network on mhw</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>mhw-mathcode</copyright>
        <lastBuildDate>Sat, 16 Aug 2025 08:47:45 +0000</lastBuildDate><atom:link href="https://mhw-mathcode.github.io/tags/computer-network/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>学习笔记-计算机网络</title>
        <link>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
        <pubDate>Fri, 04 Jul 2025 21:04:41 +0800</pubDate>
        
        <guid>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</guid>
        <description>&lt;h2 id=&#34;1-计算机网络体系结构&#34;&gt;1. 计算机网络体系结构
&lt;/h2&gt;&lt;p&gt;计算机网络：一个将分散的、具有独立功能的计算机系统 ，通过通信线路与交换设备连接起来，按照某种协议实现资源共享和信息传递的系统。&lt;/p&gt;
&lt;p&gt;数据交换方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路交换：​ 整个报文段的比特流从源点连续的直达终点，专用物理连接线路，直到传输结束。包含建立连接、通信、释放连接三个阶段。&lt;/li&gt;
&lt;li&gt;报文交换：将整个数据报发到相邻节点，全部存储下来，查找转发表，转发到下一个节点。&lt;/li&gt;
&lt;li&gt;分组交换：把报文分组转发到相邻节点，查找转发表，转发到下一个节点。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2.png&#34;
	width=&#34;1359&#34;
	height=&#34;647&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2_hu_6c924bf19a3d0fd7.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2_hu_9684712f9a7ec029.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;方式的选择&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;504px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机网络的类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交换方式&lt;/li&gt;
&lt;li&gt;传输介质：有线、无线&lt;/li&gt;
&lt;li&gt;使用者：公用网、专用网&lt;/li&gt;
&lt;li&gt;覆盖范围：广域网、城域网、局域网、个人局域网&lt;/li&gt;
&lt;li&gt;拓扑结构：总线型、环型、星型、网状型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机网络的性能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;速率：每秒传输多少个比特（bit/s bps）&lt;/li&gt;
&lt;li&gt;带宽：单位时间内从网络内一点到另一点通过的最高数据量&lt;/li&gt;
&lt;li&gt;吞吐量：单位时间内从网络内一点到另一点通过的实际数据量&lt;/li&gt;
&lt;li&gt;时延：数据从网络内一点到另一点所耗费的时间（发送时延、传播时延、时延带宽积、往返时间 RTT）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;计算机网络体系结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI：应用层，表示层，会话层，传输层，网络层，数据链路层，物理层。&lt;/li&gt;
&lt;li&gt;TCP/IP：
&lt;ul&gt;
&lt;li&gt;应用层：为不同用户提供不同服务&lt;/li&gt;
&lt;li&gt;传输层：进程与进程之间的通信&lt;/li&gt;
&lt;li&gt;网络层：不同网络之间的通信&lt;/li&gt;
&lt;li&gt;数据链路层：局域网通信&lt;/li&gt;
&lt;li&gt;物理层：数据传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;五层模型：
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.png&#34;
	width=&#34;1638&#34;
	height=&#34;631&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1_hu_5aaee1d64a9f1557.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1_hu_1355dfffaf36bceb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;五层模型&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;259&#34;
		data-flex-basis=&#34;623px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-物理层&#34;&gt;2. 物理层
&lt;/h2&gt;&lt;p&gt;三种通信方式：单工通信（单向通信）、半双工通信（双向交替通信）、全双工通信（双向同时通信）。&lt;/p&gt;
&lt;p&gt;同步通信：同步通信双方必须先建立同步，即双方的时钟要调整到同一个频率。收发双方不停的发送和接收连续的同步比特流。
异步通信：发送字符之间的时间间隔可以是任意的，但接收端必须时刻做好接收的准备。&lt;/p&gt;
&lt;p&gt;奈氏准则：在带宽受限但无噪声的信道中，为了避免码间串扰，极限码元传输速率为二倍信道带宽。
香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。
&lt;/p&gt;
\[
\text{极限数据传输速率} = W \log_2\left(1 + \frac{S}{N}\right)(b/s)
\]&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;符号&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;\(W\)&lt;/td&gt;
          &lt;td&gt;信道带宽（单位：Hz）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;\(S\)&lt;/td&gt;
          &lt;td&gt;信道所传信号的平均功率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;\(N\)&lt;/td&gt;
          &lt;td&gt;信道内的高斯噪声功率&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;\(\frac{S}{N}\)&lt;/td&gt;
          &lt;td&gt;信噪比（Signal-to-Noise Ratio，SNR）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;3-数据链路层&#34;&gt;3. 数据链路层
&lt;/h2&gt;&lt;p&gt;数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将来自网络层的数据可靠地传输到相邻节点的目标机网络层。其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路。&lt;/p&gt;
&lt;p&gt;数据链路层的三个基本问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装成帧：网络层交付下来的数据包叫做分组，数据链路层需要对分组封装成帧，数据帧是数据链路层的基本传输单位，帧 = 帧首部 + IP数据报 + 帧尾部；数据链路层把帧（比特组）做为传输单位，在出错时只需重发出错的帧，而不必重发全部数据。&lt;/li&gt;
&lt;li&gt;透明传输：无论发送什么样的比特组合的数据，通过“字节填充”或“字符填充”，这些数据都能够按照原样没有差错地通过这个数据链路层。&lt;/li&gt;
&lt;li&gt;差错控制：帧在传输过程中出现错误，有位错和帧错，差错控制负责发现错误，解决错误。传输中的差错一般都是由于噪声引起的。
&lt;ul&gt;
&lt;li&gt;差错类型：
&lt;ul&gt;
&lt;li&gt;位错：比特位出错；&lt;/li&gt;
&lt;li&gt;帧错：帧丢失（重传）、帧重复和帧失序（帧序号）；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;检错编码：奇偶校验码、循环冗余码（CRC）&lt;/li&gt;
&lt;li&gt;纠错编码：海明码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点对点协议 PPP：（1）一个将 IP 数据包封装到串行链路的方法；（2）网络控制协议（NCP）；（3）链路控制协议（LCP）。&lt;/p&gt;
&lt;p&gt;介质访问控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;介质访问控制：采用一些措施，使得两对结点之间的通信不会互相干扰。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5.png&#34;
	width=&#34;1372&#34;
	height=&#34;716&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5_hu_7e84a420c795af9c.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/5_hu_1a3c3dc6a981db45.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;介质访问控制&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;CSMA 协议：先听再发。
CS：载波侦听/监听，每一个站在发送数据之前以及发送数据时都要检测一下总线上是否有其他计算机在发送数据；
MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上。
&lt;ul&gt;
&lt;li&gt;CSMA/CD 协议：CD，碰撞检测。（1）先听再发（2）边发边听（3）发生冲突立刻停止发送（4）停止发送数据后，发送增强冲突信号（5）执行退避算法。&lt;/li&gt;
&lt;li&gt;CSMA/CA 协议：CA，避免碰撞。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;截断二进制指数规避算法：发生碰撞后，什么时候重传？
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6.png&#34;
	width=&#34;1364&#34;
	height=&#34;681&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6_hu_a4851bc0606c9816.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/6_hu_373629a727eb9b42.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;截断二进制指数规避算法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CSMA/CD 协议是使用广播信道的数据链路层协议，在局域网内进行通信，使用的技术成为以太网技术，使用 48 位的 MAC 地址（物理地址）。&lt;/p&gt;
&lt;h2 id=&#34;4-网络层&#34;&gt;4. 网络层
&lt;/h2&gt;&lt;p&gt;网络层提供的两种服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚电路服务：必须建立连接，可靠&lt;/li&gt;
&lt;li&gt;数据报服务（IP 服务）：不需要建立连接，不可靠，尽最大努力交付&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IP 协议：是网络层中的核心协议。IP 地址 32 位（IPV6 地址 128 位），{&amp;lt;网络号&amp;gt;，&amp;lt;主机号&amp;gt;}，对应的子网掩码是 {&amp;lt;11……11&amp;gt;，&amp;lt;00……00&amp;gt;}。
ARP 协议：完成主机或路由器 IP 地址到 MAC 地址的映射（RARP 协议逆过程）。
ICMP 协议：负责实现差错报告/网络探询（ping），针对出错的分组，除了丢弃之外，还需要发送特定的 ICMP 报文。
NAT 协议：路由器对目的地址是私有 IP 地址的数据报一律不进行转发，也就是无法与外界网络通信；此时就需要使用网络地址转换 NAT 将本地地址转化为全球地址进行网络通信。（LAN 局域网 -&amp;gt; WAN 广域网）&lt;/p&gt;
&lt;p&gt;路由选择协议：让路由器自动、动态、可靠地发现并维护“到达全网所有目的地的最优路径”。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部网关协议 IGP
&lt;ul&gt;
&lt;li&gt;RIP 协议：基于距离向量的路由选择协议&lt;/li&gt;
&lt;li&gt;OSPF 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外部网关协议 EGP
&lt;ul&gt;
&lt;li&gt;BGP 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-传输层&#34;&gt;5. 传输层
&lt;/h2&gt;&lt;p&gt;UDP 只在 IP 数据报服务之上增加了很少功能，即复用分用和差错检测功能（首部 8 个字节）。
UDP 的主要特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDP 是无连接的，减少开销和发送数据之前的时延。&lt;/li&gt;
&lt;li&gt;UDP 使用最大努力交付，即不保证可靠交付。&lt;/li&gt;
&lt;li&gt;UDP 是面向报文的，适合一次性传输少量数据的网络应用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TDP 的主要特点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 是面向连接（虚连接）的传输层协议。&lt;/li&gt;
&lt;li&gt;每一条 TCP 连接只能有两个端点（套接字 socket = (IP 地址 : 端口号)），每一条 TCP 连接只能是点对点的。&lt;/li&gt;
&lt;li&gt;TCP 提供可靠交付的服务，无差错、不丢失、不重复、按序到达。&lt;/li&gt;
&lt;li&gt;TCP 提供全双工通信。&lt;/li&gt;
&lt;li&gt;TCP 面向字节流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;连接管理：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立连接的三次握手
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/9.png&#34;
	width=&#34;1416&#34;
	height=&#34;790&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/9_hu_a3c543cb9930a828.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/9_hu_f6cf42c6684e3e8d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;三次握手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;释放连接的四次挥手
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/10.png&#34;
	width=&#34;1266&#34;
	height=&#34;718&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/10_hu_8f047c1f7d928510.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/10_hu_accd154a1cfe7b9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;四次挥手&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;423px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流量控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流量控制：控制发送速率，使接收方有足够的缓冲空间来接受每一个帧。通常用于解决发送较快、接收较慢而造成的传输错误。
&lt;ul&gt;
&lt;li&gt;数据链路层的流量控制手段：接收方收不下就不回复确认；&lt;/li&gt;
&lt;li&gt;传输层的流量控制手段：接收方给发送方一个窗口公告。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流量控制的方法：
&lt;ul&gt;
&lt;li&gt;停止-等待协议：发送方每发一个帧就会停止发送，等待对方的确认信号（ACK），然后再发送下一个帧。&lt;/li&gt;
&lt;li&gt;滑动窗口协议：
&lt;ul&gt;
&lt;li&gt;后退 N 帧协议（GBN）&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3.png&#34;
	width=&#34;1367&#34;
	height=&#34;764&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3_hu_2f082a62928d896d.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/3_hu_ae5fb48279db0572.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;GBN（数字前面都加个“第”）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;选择重传协议（SR）&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4.png&#34;
	width=&#34;1382&#34;
	height=&#34;767&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4_hu_d144459e2e2f4685.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/4_hu_9b16f328036547fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;SR（数字前面都加个“第”）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;拥塞控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥塞控制：对资源需求的总和大于可用资源，拥塞控制是为了防止过多的数据注入到网络中。&lt;/li&gt;
&lt;li&gt;算法：
&lt;ul&gt;
&lt;li&gt;慢开始 + 拥塞避免
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7.png&#34;
	width=&#34;1490&#34;
	height=&#34;775&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7_hu_9814bca79ceb75e5.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/7_hu_a8b7a9169b89ef22.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;慢开始 &amp;#43; 拥塞避免&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;快重传 + 快恢复
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8.png&#34;
	width=&#34;1459&#34;
	height=&#34;663&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8_hu_6cacb92aef3848bd.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/8_hu_c6fda973a23be763.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;快重传 &amp;#43; 快恢复&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;528px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-应用层&#34;&gt;6. 应用层
&lt;/h2&gt;&lt;p&gt;网络应用模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户/服务器（C/S）模型&lt;/li&gt;
&lt;li&gt;P2P 模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;域名解析协议 DNS：采用 C/S 模型 ，使用 UDP 协议，占用 53 号端口；可分为 3 部分：层次域名空间、域名服务器和解析器；作用：将域名解析成为 IP 地址 (域名解析)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;递归查询 (靠别人)：主机访问本地域名服务器，若缓存没有 IP，则本地域名服务器进一步向更高层域名服务器查询；&lt;/li&gt;
&lt;li&gt;迭代查询 (靠自己)：主机分别向多个服务器发送查询请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文件传输协议 FTP：采用 C/S 模型 ，使用 TCP 协议，占用 20、21 号端口；在进行文件传输时，FTP 的客户端与服务器之间要建立两个并行的 TCP 连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制连接，占用端口 21 号。在整个会话期间一直保持，FTP 客户端通过控制连接给服务器端发送传送请求；&lt;/li&gt;
&lt;li&gt;数据连接，占用端口 20 号。用于传输文件。服务器端的控制进程收到传送请求，就会创建数据连接，在传输完毕之后关闭连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单邮件传送协议 SMTP：采用 C/S 模型 ，使用 TCP 协议，占用 25 号端口；SMTP 通信包含三个阶段&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;连接建立
&lt;ul&gt;
&lt;li&gt;发信人先将发送的邮件送到邮件缓存，SMTP 客户端每隔一定时间对其扫描一次；&lt;/li&gt;
&lt;li&gt;发现邮件，就同接收方SMTP服务器建立 TCP 连接；&lt;/li&gt;
&lt;li&gt;连接建立后，接收方SMTP服务器发出 服务就绪 ，然后 SMTP客户端 向 SMTP服务器 发送 HELLO命令 + 发送方主机名；&lt;/li&gt;
&lt;li&gt;若有能力接收，就发送 OK命令，否则回答服务不可用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;邮件发送
&lt;ul&gt;
&lt;li&gt;邮件发送从 Mail 命令开始；&lt;/li&gt;
&lt;li&gt;SMTP 服务器准备好了，就发送 RCPT 命令，并返回相应信息，然后开始传输数据；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连接释放
&lt;ul&gt;
&lt;li&gt;邮件发送完毕之后，SMTP 客户发送 QUIT 命令，STMP 服务器返回信息，表示同意释放 TCP 连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;互联网、因特网和万维网的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互联网（internet）泛指由多个计算机网络按照一定的通信协议相互连接而成的一个大型计算机网络。&lt;/li&gt;
&lt;li&gt;因特网（Internet）是指在 ARPA 网基础上发展而来的世界上最大的全球性互联网络。因特网和其他类似的由计算机相互连接而成的大型网络系统，都可算是 “互联网”，因特网只是互联网中最大的一个。&lt;/li&gt;
&lt;li&gt;万维网是无数个网络站点和网页的集合，它们一起构成了因特网最主要的部分。&lt;/li&gt;
&lt;li&gt;简介一句话：互联网 &amp;gt; 因特网 &amp;gt; 万维网&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;超文本传输协议 HTTP：采用 C/S 模型 ，使用 TCP 协议，占用 80 号端口；工作流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;（通过 DHCP 协议，得到本机 IP 地址，然后有 ARP 协议将 IP 地址转化为物理地址，得到 DNS server 的 MAC 地址）&lt;/li&gt;
&lt;li&gt;浏览器通过 DNS 解析域名地址，获得对应网址的 IP 地址；&lt;/li&gt;
&lt;li&gt;浏览器与该服务器建立 TCP 连接；&lt;/li&gt;
&lt;li&gt;浏览器向服务器发送 HTTP 请求；&lt;/li&gt;
&lt;li&gt;服务器通过 HTTP 响应 把文件发送给浏览器；&lt;/li&gt;
&lt;li&gt;释放 TCP 连接；&lt;/li&gt;
&lt;li&gt;浏览器解释文件并显示。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
