<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Data Structure on mhw</title>
        <link>https://mhw-mathcode.github.io/tags/data-structure/</link>
        <description>Recent content in Data Structure on mhw</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>mhw-mathcode</copyright>
        <lastBuildDate>Thu, 14 Aug 2025 06:59:22 +0000</lastBuildDate><atom:link href="https://mhw-mathcode.github.io/tags/data-structure/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>学习笔记-数据结构</title>
        <link>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
        <pubDate>Sun, 22 Jun 2025 11:50:20 +0800</pubDate>
        
        <guid>https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
        <description>&lt;h2 id=&#34;1-线性表&#34;&gt;1. 线性表
&lt;/h2&gt;&lt;p&gt;数据结构三要素：逻辑结构、数据的运算、存储结构。&lt;/p&gt;
&lt;p&gt;线性表是具有相同数据类型的n(n&amp;gt;=0)个数据元素的有限序列。（逻辑结构）&lt;/p&gt;
&lt;p&gt;基本操作：创建、销毁、插入、删除、按值查找、按位查找。&lt;/p&gt;
&lt;p&gt;顺序表 = 线性表 + 顺序存储（静态分配 or 动态分配）&lt;/p&gt;
&lt;p&gt;链表 = 线性表 + 链式存储（单链表、双链表、循环单链表、循环双链表、静态链表）&lt;/p&gt;
&lt;h2 id=&#34;2-栈和队列&#34;&gt;2. 栈和队列
&lt;/h2&gt;&lt;p&gt;栈是只允许在一端进行查入或者删除操作的线性表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n 个不同元素进栈，出栈元素不同排列的个数为 $\frac{1}{n+1} C_{2n}^n$ （卡特兰数）。&lt;/li&gt;
&lt;li&gt;顺序栈（共享栈）、链栈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;队列是只能在队尾插入、在队首删除的线性表。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序队列、循环队列、链式队列、双端队列&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表达式求值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中缀转后缀：
&lt;ul&gt;
&lt;li&gt;（手算）先确定各个运算符的顺序，然后按照 [左操作数 右操作数 运算符] 的方式组合。&lt;/li&gt;
&lt;li&gt;（机算）
&lt;ul&gt;
&lt;li&gt;遇到操作数直接加入后缀表达式；&lt;/li&gt;
&lt;li&gt;遇到界限符，遇到 ( 直接入栈，遇到 ) 则依次弹出栈内运算符并加入后缀表达式，直到弹出 ( 为止；&lt;/li&gt;
&lt;li&gt;遇到运算符，依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到 ( 或栈空则停止。之后再把当前运算符入栈。处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;后缀表达式（逆波兰表达式）计算：
&lt;ul&gt;
&lt;li&gt;从左往右扫描后缀表达式；&lt;/li&gt;
&lt;li&gt;扫描操作数入栈；&lt;/li&gt;
&lt;li&gt;扫描操作符，弹出两个栈顶元素，计算结果入栈。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;中缀表达式计算：
&lt;ul&gt;
&lt;li&gt;初始化两个栈，操作数栈和运算符栈；&lt;/li&gt;
&lt;li&gt;若扫描到操作数，压入操作数栈；&lt;/li&gt;
&lt;li&gt;若扫描到运算符或界限符，则按照“中级转后缀”相同的逻辑压入运算符栈（期间会弹出运算符，每当弹出一个运算符时，需弹出两个操作数栈的栈顶元素并执行运算，结果压回操作数栈）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4.png&#34;
	width=&#34;406&#34;
	height=&#34;224&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4_hu_241a7f506e078edc.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4_hu_3d75ca22ba6202cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;举个例子&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;特殊矩阵压缩存储：对阵矩阵，三角矩阵，三对角矩阵，稀疏矩阵（三元组、十字链表法）。&lt;/p&gt;
&lt;h2 id=&#34;3-串&#34;&gt;3. 串
&lt;/h2&gt;&lt;p&gt;串是由零个或多个字符组成的有限序列。&lt;/p&gt;
&lt;p&gt;KMP 算法（时间复杂度 $O(n+m)$）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当主串与模式串 $S$ 不匹配时，主串 $i$ 不回溯，模式串 $j=next[j]$ （模式串的 $next$ 数组）。&lt;/li&gt;
&lt;li&gt;$next[j]$：由1~j-1个字符组成的串最长相等前后缀长度+1（取决于下标从 0 还是 1 开始）。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// T[i]表示后缀的单个字符, T[j]表示前缀的单个字符
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 如果字符不相同，则j值回溯
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;$nextval[j]$：$next$ 数组的优化
&lt;ul&gt;
&lt;li&gt;如果 $S[next[j]]==S[j]$ ，表明这其实是一次无效的比较，$nextval[j]=nextval[next[j]]$；&lt;/li&gt;
&lt;li&gt;否则，$nextval[j]=next[j]$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-树&#34;&gt;4. 树
&lt;/h2&gt;&lt;h3 id=&#34;概念与性质&#34;&gt;概念与性质
&lt;/h3&gt;&lt;p&gt;结点的度：结点的分支数
树的度：树中各结点的度的最大值
结点数=总度数（边数）+1&lt;/p&gt;
&lt;p&gt;m叉树：可以所有结点的度都 $&amp;lt;= m$（结点的度最大为 $m$ ，可以为空树）
度为m的树：至少一个结点的度 $= m$（至少 $m+1$ 个结点）&lt;/p&gt;
&lt;h3 id=&#34;二叉树&#34;&gt;二叉树
&lt;/h3&gt;&lt;p&gt;二叉树是度为 2 的有序树（每个结点至多两个子树，左右子树不能颠倒）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;满二叉树：不存在度为 1 的结点。&lt;/li&gt;
&lt;li&gt;完全二叉树：在满二叉树的基础上，从最后一个结点开始去结点。&lt;/li&gt;
&lt;li&gt;二叉排序树：左子树关键字均小于根节点的关键字，右子树关键字均大于根节点的关键字。&lt;/li&gt;
&lt;li&gt;平衡二叉树（平衡二叉搜索树）：树上任意一个结点的左子树和右子树深度之差不超过 1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;顺序存储（左儿子 $i&lt;em&gt;2$ ，右儿子 $i&lt;/em&gt;2+1$ ）、链式存储&lt;/p&gt;
&lt;p&gt;性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉树：叶子结点（度为 0 的结点）的数量比度为 2 的结点的数量多一个&lt;/li&gt;
&lt;li&gt;具有 n 个结点的完全二叉树的高度为 $h = \lceil \log_2 (n + 1) \rceil$ 或 $h = \lfloor \log_2 n \rfloor + 1$ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历：根 &amp;ndash;&amp;gt; 左 &amp;ndash;&amp;gt; 右&lt;/li&gt;
&lt;li&gt;中序遍历：左 &amp;ndash;&amp;gt; 根 &amp;ndash;&amp;gt; 右&lt;/li&gt;
&lt;li&gt;后序遍历：左 &amp;ndash;&amp;gt; 右 &amp;ndash;&amp;gt; 根&lt;/li&gt;
&lt;li&gt;层序遍历：$bfs$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由遍历序列构造二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前序+中序&lt;/li&gt;
&lt;li&gt;后序+中序&lt;/li&gt;
&lt;li&gt;层序+中序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线索二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 左、右线索标志
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ThreadNode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ElemType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ThreadNode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lchild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rchild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 0指向孩子；1指向线索
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.png&#34;
	width=&#34;1010&#34;
	height=&#34;648&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1_hu_23bd51cca5ab60f9.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1_hu_c265e840dc61adb8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;线索二叉树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;中序线索化（先序、后序类似）
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2.jpg&#34;
	width=&#34;1104&#34;
	height=&#34;702&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2_hu_baf945ac8f6465cf.jpg 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/2_hu_35955af97ad8c624.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;中序线索化&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;377px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;应用：找中序后继（剩余同理）
&lt;ul&gt;
&lt;li&gt;在中序线索二叉树中，如果 $p \rightarrow rTag==1$ ，右孩子指针被线索化了，那么直接得到中序后继；&lt;/li&gt;
&lt;li&gt;若 $p \rightarrow rTag==0$ ，有右孩子。就要找右子树得中序遍历最左边的结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;树与森林&#34;&gt;树与森林
&lt;/h3&gt;&lt;p&gt;树的存储结构：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双亲表示法（顺序存储）&lt;/li&gt;
&lt;li&gt;孩子表示法（顺序存储+链式存储）&lt;/li&gt;
&lt;li&gt;孩子兄弟表示法（顺序存储+链式存储，左指针指向儿子，右指针指向兄弟）（树、森林与二叉树的转换）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;树的遍历：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先根遍历：先访问根节点，再对每颗子树进行先根遍历；树的先根遍历序列和 对应的二叉树的先序序列相同。&lt;/li&gt;
&lt;li&gt;后根遍历：先对每颗子树进行后根遍历，再访问根节点；树的后根遍历序列和对应的二叉树的中序序列相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;森林的遍历：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历&lt;/li&gt;
&lt;li&gt;中序遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用&#34;&gt;应用
&lt;/h3&gt;&lt;p&gt;二叉排序树（BST）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;二叉排序树，又叫二叉查找树（Binary Search Tree），其左子树关键字均小于根节点的关键字，右子树关键字均大于根节点的关键字。&lt;/li&gt;
&lt;li&gt;查找、插入、构造、删除（度为 2 的结点需要找前驱或者后继）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平衡二叉树（AVL）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平衡因子 = 左子树高 - 右子树高，任一结点平衡因子绝对值小于 1。&lt;/li&gt;
&lt;li&gt;插入：
&lt;ul&gt;
&lt;li&gt;每次只需调整最小不平衡子树。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3.png&#34;
	width=&#34;914&#34;
	height=&#34;526&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3_hu_d634cbd74a449c74.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3_hu_e5e0aaceecfabadb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;调整最小不平衡子树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;417px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;高度为 h 时最少有 $\frac{h*(h-1)}{2}+1$ 个结点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;哈夫曼树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈夫曼树：带权路径长度（WPL）最小的二叉树
&lt;ul&gt;
&lt;li&gt;结点的带权路径长度：从根结点到该结点的路径长度 * 权值&lt;/li&gt;
&lt;li&gt;树的带权路径长度：所有叶结点的带权路径长度之和&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;构造：
&lt;ul&gt;
&lt;li&gt;选权值最小的两个结点；&lt;/li&gt;
&lt;li&gt;在剩下的结点中挑一个最小的结点继续结合；或者挑两个结点先结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;性质：
&lt;ul&gt;
&lt;li&gt;结点总数为 $2*n-1$&lt;/li&gt;
&lt;li&gt;不存在度为 1 的结点&lt;/li&gt;
&lt;li&gt;哈夫曼树不唯一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;哈夫曼编码：
&lt;ul&gt;
&lt;li&gt;固定长度编码：每个字符用相等长度的二进制位表示&lt;/li&gt;
&lt;li&gt;可变长度编码：允许对不同字符用不等长的二进制位表示&lt;/li&gt;
&lt;li&gt;前缀编码：没有一个编码是另一个编码的前缀&lt;/li&gt;
&lt;li&gt;将字符频次作为字符结点权值，构造哈夫曼树，可得到哈夫曼编码，可用于数据压缩。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-图&#34;&gt;5. 图
&lt;/h2&gt;&lt;h3 id=&#34;概念&#34;&gt;概念
&lt;/h3&gt;&lt;p&gt;图 G 就是由点集 V 和边集 E 组成的。
无向图和有向图：有向边 &amp;lt;A, B&amp;gt; （弧尾，弧头），无向边 (A, B)
简单图：不存在重复的边；多重图：存在重复的边。
顶点的度 = 入度 + 出度
简单路径：顶点不重复出现；简单回路：除了头顶点和尾顶点，其余顶点里不出现重复的顶点。&lt;/p&gt;
&lt;p&gt;连通性：无向图中，$v — … — w$ （v，w之间是连通的）；
强连通性：有向图中，既有$v \rightarrow … \rightarrow w$ ，又有 $v \leftarrow … \leftarrow w$ ，（v，w 之间是强连通的）。
连通图：在无向图中，任意两个点连通；
强连通图：在有向图中，任意两个点强连通。最少有 n 条边（形成回路）。&lt;/p&gt;
&lt;p&gt;子图：部分点集+部分边集，每条边的两个点一定存在。
生成子图：子图包含原图的所有顶点，可以去掉一些边。
连通分量：在无向图中极大的连通子图
强连通分量：在有向图中极大的强连通子图&lt;/p&gt;
&lt;p&gt;生成树：对于连通图，包含图中所有顶点的极小连通子图
生成森林：对于非连通图，各连通分量的生成树组成了生成森林&lt;/p&gt;
&lt;p&gt;存储：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;邻接矩阵&lt;/li&gt;
&lt;li&gt;邻接表&lt;/li&gt;
&lt;li&gt;十字链表
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.png&#34;
	width=&#34;604&#34;
	height=&#34;330&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5_hu_7389397805e72b7b.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5_hu_1ca7bc0d5e958c03.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;十字链表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;439px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;邻接多重表
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6.png&#34;
	width=&#34;659&#34;
	height=&#34;384&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6_hu_9f6f6e7fca2cd558.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/6_hu_b3b46207076e4988.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;邻接多重表&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;应用-1&#34;&gt;应用
&lt;/h3&gt;&lt;p&gt;最小生成树（MST）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$Prim$ ：$O(n^2)$，每次遍历所有结点找到加入 MST 的代价 $lowcast$ 最低的结点，然后用改结点更新所有结点的 $lowcast$。&lt;/li&gt;
&lt;li&gt;$Kruskal$ ：$O(|E|log|E|)$，每次选择一条权值最小的且该边两端结点不连通的边。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最短路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单源最短路：
&lt;ul&gt;
&lt;li&gt;$BFS$ ：无权图&lt;/li&gt;
&lt;li&gt;$Dijkstra$ ：正权图，优先队列优化 $O(nlogn)$ 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多源最短路：
&lt;ul&gt;
&lt;li&gt;$Floyd$ ：无负权回路的图&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有向无环图（Directed Acyclic Graph）描述表达式：
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7.png&#34;
	width=&#34;760&#34;
	height=&#34;417&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7_hu_71236bd49094b669.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/7_hu_18a87af0079ec168.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;DAG 描述表达式&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;拓扑排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOV：顶点表示活动的网（Activity On Vertex Network）&lt;/li&gt;
&lt;li&gt;DAG 表示一个工程（工程就是活动的顺序序列集合）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键路径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AOE：顶点表示事件，有向边表示活动，边的权值表示该活动的花销，称为 AOE 网（Activity On Edge Network）。&lt;/li&gt;
&lt;li&gt;从源点到汇点的有向路径中，长度最大的路径成为关键路径，关键路径上的活动成为关键活动。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8.png&#34;
	width=&#34;902&#34;
	height=&#34;476&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8_hu_4a9e22be7c1f83f5.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/8_hu_b561ba9255578f2d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;关键路径求解方法&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;特性：
&lt;ul&gt;
&lt;li&gt;若关键活动耗时增加，则整个工程的工期将增长&lt;/li&gt;
&lt;li&gt;缩短关键活动的时间，可以缩短整个工程的工期&lt;/li&gt;
&lt;li&gt;当缩短到一定程度时，关键活动可能会变成非关键活动&lt;/li&gt;
&lt;li&gt;可能有多条关键路径，只提高一条关键路径上的关键活动速度并不能缩短整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到缩短工期的目的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-查找b树散列表&#34;&gt;6. 查找（B树、散列表）
&lt;/h2&gt;&lt;h3 id=&#34;概念-1&#34;&gt;概念
&lt;/h3&gt;&lt;p&gt;查找表：用于查找的数据集合。
静态查找表（仅查找）、动态查找表（插删操作）。
平均查找长度（ASL）：所有查找过程中关键字的比较次数的平均值。&lt;/p&gt;
&lt;p&gt;顺序查找、折半查找、分块查找（又叫索引顺序查找，块内无序、块间有序）&lt;/p&gt;
&lt;p&gt;B 树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B 树，又称多路平衡查找树，B 树中所有结点的孩子个数的最大值称为 B 树的阶，通常用 m 表示。一棵 m 阶 B 树或为空树，或为满足如下特性的 m 叉树：
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/9.png&#34;
	width=&#34;641&#34;
	height=&#34;286&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/9_hu_c2be0817c8ae6b50.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/9_hu_fd0f862df7cb5de.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B 树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;树中每个结点至多有 m 棵子树，即至多含有 m-1 个关键字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若根结点不是终端结点，则至少有两棵子树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除根结点外的所有非叶结点至少有 $⌊m/2⌋$ 棵子树，即至少含有 $⌊m/2⌋-1$ 个关键字。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有非叶结点的结构如下，其中，$K_i（i = 1, 2, &amp;hellip;, n）$ 为结点的关键字，且满足 $K_1 &amp;lt; K_2 &amp;lt; &amp;hellip; &amp;lt; K_n$ ；$P_i（i = 0, 1, &amp;hellip;, n）$ 为指向子树根结点的指针，且指针 $P_{i-1}$ 所指子树中所有结点的关键字均小于 $K_i$，$P_i$ 所指子树中所有结点的关键字均大于 $K_i$ ，$n（⌊m/2⌋ - 1 ≤ n ≤ m - 1）$ 为结点中关键字的个数。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;n&lt;/th&gt;
          &lt;th&gt;P₀&lt;/th&gt;
          &lt;th&gt;K₁&lt;/th&gt;
          &lt;th&gt;P₁&lt;/th&gt;
          &lt;th&gt;K₂&lt;/th&gt;
          &lt;th&gt;P₂&lt;/th&gt;
          &lt;th&gt;&amp;hellip;&lt;/th&gt;
          &lt;th&gt;Kₙ&lt;/th&gt;
          &lt;th&gt;Pₙ&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有的叶结点都出现在同一层次上，并且不带信息（可以视为外部结点或类似于折半查找判定树的查找失败结点，实际上这些结点不存在，指向这些结点的指针为空）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;含 n 个关键字的 m 叉 B 树，高度满足以下不等式：$\log_m(n + 1) \leq h \leq \log_{\lceil m/2 \rceil} \frac{n + 1}{2} + 1$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入：在插入 $key$ 后，若导致原结点关键字数超过上限，则从中间位置（$⌊m/2⌋$）将其中的关键字分为两部分，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，中间位置（$⌊m/2⌋$）的结点插入原结点的父结点。若此时导致其父结点的关键字个数也超过了上限，则继续进行这种分裂操作，直至这个过程传到根结点为止，进而导致 B 树高度增加 1。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除非终端节点，找直接前驱或直接后继，转化为终端结点的删除；&lt;/li&gt;
&lt;li&gt;删除终端结点
&lt;ul&gt;
&lt;li&gt;删除后结点关键字个数未低于下限，直接删除；&lt;/li&gt;
&lt;li&gt;若低于下限：
&lt;ul&gt;
&lt;li&gt;兄弟够借：左兄弟富裕，用该结点前驱的前驱填补，右同理;&lt;/li&gt;
&lt;li&gt;兄弟不够借：左右兄弟关键字均 $=\lceil m/2 \rceil - 1$，将左（右）兄弟结点及双亲结点中的关键字进行合并。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B+ 树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;m 个关键字，对应 m 个分支，m 个子树，查找信息并不会停留在分支节点上，会一直查找到叶子结点。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10.png&#34;
	width=&#34;769&#34;
	height=&#34;303&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10_hu_540d4cee62fc6ce9.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/10_hu_93524166148a8cd6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B&amp;#43; 树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;253&#34;
		data-flex-basis=&#34;609px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;散列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;也称哈希表，通过散列函数（哈希函数）将关键字与存储地址联系起来。若不同关键字映射到了同一个值，称为冲突（同义词）。冲突越少查找效率越高。&lt;/li&gt;
&lt;li&gt;散列函数：
&lt;ul&gt;
&lt;li&gt;除留余数法：选不大于散列表长度的最大质数，为了让不同的关键字冲突尽可能少。&lt;/li&gt;
&lt;li&gt;直接定址法：$H(key)=a*key+b$ 。&lt;/li&gt;
&lt;li&gt;数字分析法：选取数码分布较为均匀的若干位作为散列地址。&lt;/li&gt;
&lt;li&gt;平方取中法：取关键字平方值的中间几位作为散列地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;处理冲突：
&lt;ul&gt;
&lt;li&gt;拉链法：将同义词存储在一个链表中。优化：同一链表中数据有序连接。&lt;/li&gt;
&lt;li&gt;开放地址法：可存放新表项的空闲地址既向他的同义词表项开放，又向他的非同义词表项开放，即 $H_i=(H(key)+d_i) % m $。
&lt;ul&gt;
&lt;li&gt;线性探测法：$d_i=0,1,2,…,m-1$，即发生冲突时每次往后探测相邻的下一个单元是否为空。删除某个结点时需要做一个删除标记，否则会截断在他之后填入的关键字。&lt;/li&gt;
&lt;li&gt;平方探测法：$d_i=0^2,1^2,-1^2,2^2,-2^2,…,k^2,-k^2$，相较于线性探测法更不易于产生聚集问题。&lt;/li&gt;
&lt;li&gt;伪随机序列法：$d_i=某个伪随机序列$。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;再散列法：准备多个散列函数，发生冲突就用下一个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;7-排序&#34;&gt;7. 排序
&lt;/h2&gt;&lt;p&gt;算法稳定性：关键字相同的两个元素，在排序之后相对位置不变。&lt;/p&gt;
&lt;p&gt;内部排序：数据都在内存中；
外部排序：数据无法全部放在内存中。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;排序算法&lt;/th&gt;
          &lt;th&gt;平均时间复杂度&lt;/th&gt;
          &lt;th&gt;最好情况&lt;/th&gt;
          &lt;th&gt;最坏情况&lt;/th&gt;
          &lt;th&gt;空间复杂度&lt;/th&gt;
          &lt;th&gt;排序方式&lt;/th&gt;
          &lt;th&gt;稳定性&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;冒泡排序&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(n)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(1)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;选择排序&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(1)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;插入排序&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(n)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(1)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;希尔排序&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log² n)&lt;/td&gt;
          &lt;td&gt;O(n log² n)&lt;/td&gt;
          &lt;td&gt;O(1)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;归并排序&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n)&lt;/td&gt;
          &lt;td&gt;Out-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;快速排序&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(log n)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;堆排序&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(n log n)&lt;/td&gt;
          &lt;td&gt;O(1)&lt;/td&gt;
          &lt;td&gt;In-place&lt;/td&gt;
          &lt;td&gt;不稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;计数排序&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;O(k)&lt;/td&gt;
          &lt;td&gt;Out-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;桶排序&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;O(n²)&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;Out-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;基数排序&lt;/td&gt;
          &lt;td&gt;O(n × k)&lt;/td&gt;
          &lt;td&gt;O(n × k)&lt;/td&gt;
          &lt;td&gt;O(n × k)&lt;/td&gt;
          &lt;td&gt;O(n + k)&lt;/td&gt;
          &lt;td&gt;Out-place&lt;/td&gt;
          &lt;td&gt;稳定&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;插入排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接插入排序：每次将一个待排元素按其关键字大小插入到前面已经排好的子序列中。&lt;/li&gt;
&lt;li&gt;折半插入排序，先用折半查找找到应该插入的位置，再移动元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;希尔排序：先将待排序表分割为若干形如 $L[i,i+d,i+2d,…,i+kd]$ 的特殊子表，对各个子表分别进行直接插入排序。缩小增量 $d$ ，重复上述过程直到 $d=1$ 为止。&lt;/p&gt;
&lt;p&gt;交换排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;冒泡排序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序：在待排序表 $L[1&amp;hellip;n]$ 中任取一个元素 $pivot$ 作为枢纽（或基准，通常取首元素），通过一趟排序将待排序表划分为独立的两部分 $L[1&amp;hellip;k-1]$ 和 $L[k+1&amp;hellip;n]$，使得 $L[1&amp;hellip;k-1]$ 中的所有元素小于 $pivot$，$L[k+1&amp;hellip;n]$ 中的所有元素大于等于 $pivot$，则 $pivot$ 放在了其最终位置 $L(k)$ 上，这个过程称为一次“划分”。然后分别递归地对两个子表重复上述过程，直至每部分内只有一个元素或空为止，即所有元素放在了其最终位置上。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选好基准，设置好 $low=1$、$high=n$ 指针；&lt;/li&gt;
&lt;li&gt;因为设置首元素为枢轴元素，所以位置 0 为空，故 $low$ 所指向的位置 0 空，$high$ 先向左遍历；&lt;/li&gt;
&lt;li&gt;若 $high$ 指针指向元素小于基准元素，则把该元素放到 $low$ 指向的空位置，此时 $high$ 指向的位置变为空，则开始向右遍历；&lt;/li&gt;
&lt;li&gt;直到 $low$、$high$ 指针相遇，该轮快排结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将这个过程组织为二叉树，二叉树的层数就是递归调用的层数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选择排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单选择排序：每一次遍历选出最小的元素加入有序子序列。&lt;/li&gt;
&lt;li&gt;堆排序：
&lt;ul&gt;
&lt;li&gt;堆：顺序存储的完全二叉树。结点i的左孩子是 $2i$；右孩子是 $2i+1$；父节点是 $\frac{i}{2}$。编号 $&amp;lt;=\frac{n}{2}$ 的结点都是分支结点&lt;/li&gt;
&lt;li&gt;建堆：编号 $&amp;lt;=\frac{n}{2}$ 的所有结点依次下坠调整，若不满足当前结点小于左右儿子，则将当前结点与更大的一个儿子交换。&lt;/li&gt;
&lt;li&gt;排序：将堆顶元素与堆底元素交换，重新进行下坠操作，使其回复大根堆特性，重复 $n-1$ 趟。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;归并排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;归并：把两个或多个子序列合并为一个。&lt;/li&gt;
&lt;li&gt;归并排序：
&lt;ul&gt;
&lt;li&gt;若 $low &amp;lt; high$，则将序列分从中间 $mid=(low+high)/2$ 分开&lt;/li&gt;
&lt;li&gt;对左半部分 $[low, mid]$ 递归地进行归并排序&lt;/li&gt;
&lt;li&gt;对右半部分 $[mid+1,high]$ 递归地进行归并排序&lt;/li&gt;
&lt;li&gt;将左右两个有序子序列 $Merge$ 为一个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基数排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将整个关键字拆分为 d 位(或“组”)&lt;/li&gt;
&lt;li&gt;按照各个 关键字位 权重递增的次序(如:个、十、百)，做 d 趟“分配”和“收集”若当前处理的 关键字位 可能取得 r 个值，则需要建立 r 个队列&lt;/li&gt;
&lt;li&gt;分配：顺序扫描各个元素，根据当前处理的关键字位，将元素插入相应队列。一趟分配耗时 $O(n)$&lt;/li&gt;
&lt;li&gt;收集：把各个队列中的结点依次出队并链接。一趟收集耗时 $O(r)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;外部排序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;外部元素太多，无法一次全部读入内存进行排序，采用归并排序的思想和方法。外存中的数据读入内存 → 在内存中排序 → 数据写入外存，总时间开销 = 内部排序所需时间 + 内部归并所需时间 + 外部读写所需时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优化：多路归并&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.对于 r 个初始归并段进行 k 路归并，需要归并趟数 = $log_k r$（向上取整，归并树高度）&lt;/li&gt;
&lt;li&gt;2.提升外部排序的速度、减少读写磁盘的速度的方法：提高 k 值，降低 r 值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提高 k 值：增加归并段长度。但是，提高 k 有负面影响：（1）需要的缓存空间升高（ k 路归并需 k 个缓冲区）；（2）内部归并的所需时间提高（选出最小关键字需要进行 k-1 次比较）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;败者树：败者树可视为一棵完全二叉树(多了一个头头)。k 个叶结点分别对应 k 个归并段中当前参加比较的元素，非叶子结点用来记忆左右子树中的“失败者”，而让胜者往上继续进行比较，一直到根结点。使用多路平衡归并可减少归并趟数，构造败者树可以使关键字对比次数减少到 $log_2 k$。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/11.png&#34;
	width=&#34;852&#34;
	height=&#34;680&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/11_hu_77a5443946bc7360.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/11_hu_78696167a10e1806.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;败者树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;125&#34;
		data-flex-basis=&#34;300px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;置换-选择排序
设初始待排文件为 FI ，初始归并段输出文件为 FO ，内存工作区为 WA ，FO 和 WA 的初始状态为空，WA 可容纳 w 个记录。置换-选择算法的步骤如下：&lt;/p&gt;
&lt;p&gt;1）从 FI 输入 w 个记录到工作区 WA。
2）从 WA 中选出其中关键字取最小值的记录，记为 MINIMAX 记录。
3）将 MINIMAX 记录输出到 FO 中去。
4）若 FI 不空，则从 FI 输入下一个记录到 WA 中。
5）从 WA 中所有关键字比 MINIMAX 记录的关键字大的记录中选出最小关键字记录，作为新的 MINIMAX 记录。
6）重复3）～5），直至在 WA 中选不出新的 MINIMAX 记录为止，由此得到一个初始归并段，输出一个归并段的结束标志到 FO 中去。
7）重复2）～6），直至 WA 为空。由此得到全部初始归并段。
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/12.jpg&#34;
	width=&#34;571&#34;
	height=&#34;875&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/12_hu_d9339524d9ea49b8.jpg 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/12_hu_61215ba0101bd59a.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;置换-选择排序&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;156px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;归并树
&lt;img src=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/13.png&#34;
	width=&#34;940&#34;
	height=&#34;473&#34;
	srcset=&#34;https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/13_hu_a911f64e5a868f67.png 480w, https://mhw-mathcode.github.io/p/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/13_hu_9af02cccaa4ffe31.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;归并树&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
